# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18wOlIxpUn7wvqpo48KRtcU65MJqsu7s-
"""

!pip install pdfkit

from transformers import T5Tokenizer, T5ForConditionalGeneration
import re
import pdfkit  # Install using: pip install pdfkit

# Install wkhtmltopdf
!apt-get update -qq > /dev/null
!apt-get install -y wkhtmltopdf > /dev/null

# Initialize T5 tokenizer and model
tokenizer = T5Tokenizer.from_pretrained("t5-small")
model = T5ForConditionalGeneration.from_pretrained("t5-small")

def generate_summary_from_experience(work_experience):
    """Generate a summary from work experience using T5 and format it into multiple lines."""
    input_text = f"summarize: {work_experience}"
    inputs = tokenizer(input_text, return_tensors="pt", max_length=512, truncation=True)
    summary_ids = model.generate(inputs.input_ids, max_length=150, min_length=30, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

    # Split the summary into sentences and format it
    sentences = summary.split(". ")  # Split by period to separate sentences
    formatted_summary = "I worked as " + ". \n".join(sentences)  # Join sentences with newlines
    return formatted_summary

def validate_date(date):
    """Validate date format (MM/YYYY)."""
    if re.match(r"^\d{2}/\d{4}$", date) or date.lower() == "present":
        return True
    return False

def get_contact_info():
    """Get contact information from the user."""
    print("\n=== Contact Information ===")
    name = input("Enter your full name: ").strip()
    phone = input("Enter your phone number: ").strip()
    email = input("Enter your email address: ").strip()
    linkedin = input("Enter your LinkedIn profile (optional, press Enter to skip): ").strip()
    portfolio = input("Enter your portfolio/website (optional, press Enter to skip): ").strip()
    address = input("Enter your address (optional, press Enter to skip): ").strip()
    return name, phone, email, linkedin, portfolio, address

def get_professional_summary(work_experience_text):
    """Get professional summary from the user, with an option to use AI-generated summary."""
    print("\n=== Professional Summary ===")
    print("Would you like to generate a professional summary using AI?")
    choice = input("Enter 'yes' to generate or 'no' to write your own: ").strip().lower()
    if choice == 'yes':
        summary = generate_summary_from_experience(work_experience_text)
        print("\nAI-Generated Summary:")
        print(summary)
        edit = input("Would you like to edit this summary? (yes/no): ").strip().lower()
        if edit == 'yes':
            summary = input("Enter your edited summary: ").strip()
    else:
        summary = input("Write a brief professional summary (2-3 sentences): ").strip()
    return summary

def get_work_experience():
    """Get work experience details from the user."""
    print("\n=== Work Experience ===")
    experiences = []
    while True:
        job_title = input("Enter your job title (or type 'done' to finish): ").strip()
        if job_title.lower() == 'done':
            break
        company = input("Enter the company name: ").strip()
        location = input("Enter the location (city, state): ").strip()
        start_date = input("Enter the start date (MM/YYYY): ").strip()
        while not validate_date(start_date):
            print("Invalid date format. Please use MM/YYYY.")
            start_date = input("Enter the start date (MM/YYYY): ").strip()
        end_date = input("Enter the end date (MM/YYYY or 'Present'): ").strip()
        while not validate_date(end_date):
            print("Invalid date format. Please use MM/YYYY or 'Present'.")
            end_date = input("Enter the end date (MM/YYYY or 'Present'): ").strip()
        achievements = []
        print("Enter your key achievements (type 'done' to finish):")
        while True:
            achievement = input("- ").strip()
            if achievement.lower() == 'done':
                break
            achievements.append(achievement)
        experiences.append({
            "job_title": job_title,
            "company": company,
            "location": location,
            "start_date": start_date,
            "end_date": end_date,
            "achievements": achievements
        })
    return experiences

def get_education():
    """Get education details from the user."""
    print("\n=== Education ===")
    education = []
    while True:
        degree = input("Enter your degree (or type 'done' to finish): ").strip()
        if degree.lower() == 'done':
            break
        institution = input("Enter the institution name: ").strip()
        location = input("Enter the location (city, state): ").strip()
        graduation_date = input("Enter the graduation date (MM/YYYY): ").strip()
        while not validate_date(graduation_date):
            print("Invalid date format. Please use MM/YYYY.")
            graduation_date = input("Enter the graduation date (MM/YYYY): ").strip()
        honors = input("Enter any honors/awards (optional, press Enter to skip): ").strip()
        education.append({
            "degree": degree,
            "institution": institution,
            "location": location,
            "graduation_date": graduation_date,
            "honors": honors
        })
    return education

def get_skills():
    """Get skills from the user."""
    print("\n=== Skills ===")
    skills = input("Enter your skills (comma-separated): ").strip()
    return [skill.strip() for skill in skills.split(',') if skill.strip()]

def get_certifications():
    """Get certifications from the user."""
    print("\n=== Certifications ===")
    certifications = []
    while True:
        certification = input("Enter a certification (or type 'done' to finish): ").strip()
        if certification.lower() == 'done':
            break
        certifications.append(certification)
    return certifications

def get_projects():
    """Get project details from the user."""
    print("\n=== Projects ===")
    projects = []
    while True:
        project_title = input("Enter the project title (or type 'done' to finish): ").strip()
        if project_title.lower() == 'done':
            break
        description = input("Enter a brief description: ").strip()
        technologies = input("Enter the technologies used: ").strip()
        role = input("Enter your role: ").strip()
        projects.append({
            "title": project_title,
            "description": description,
            "technologies": technologies,
            "role": role
        })
    return projects

def get_languages():
    """Get languages from the user."""
    print("\n=== Languages ===")
    languages = input("Enter languages you speak (comma-separated): ").strip()
    return [language.strip() for language in languages.split(',') if language.strip()]

def get_hobbies():
    """Get hobbies and interests from the user."""
    print("\n=== Hobbies and Interests ===")
    hobbies = input("Enter your hobbies/interests (comma-separated): ").strip()
    return [hobby.strip() for hobby in hobbies.split(',') if hobby.strip()]

def generate_resume_html(name, phone, email, linkedin, portfolio, address, summary, experiences, education, skills, certifications, projects,languages, hobbies):
    """Generate an HTML resume based on the provided details."""
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Resume - {name}</title>
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
            h1 {{ color: #000; }}
            h2 {{ color: #000; }}
            .section {{ margin-bottom: 20px; }}
            .section h2 {{ border-bottom: 2px solid #000; padding-bottom: 5px; }}
            .contact-info {{ margin-bottom: 10px; }}
            .contact-info p {{ margin: 5px 0; }}
            .experience, .education, .project {{ margin-bottom: 15px; }}
            .experience h3, .education h3, .project h3{{ margin: 0; }}
            .experience p, .education p, .project p {{ margin: 5px 0; }}
            .skills, .certifications, .languages, .hobbies {{ margin-bottom: 10px; }}
        </style>
    </head>
    <body>
        <h1>{name}</h1>
        <div class="contact-info">
            <p>Phone: {phone}</p>
            <p>Email: {email}</p>
            <p>LinkedIn: {linkedin if linkedin else "N/A"}</p>
            <p>Portfolio: {portfolio if portfolio else "N/A"}</p>
            <p>Address: {address if address else "N/A"}</p>
        </div>

        <div class="section">
            <h2>Professional Summary</h2>
            <p>{summary}</p>
        </div>

        <div class="section">
            <h2>Work Experience</h2>
    """
    for exp in experiences:
        html += f"""
            <div class="experience">
                <h3>{exp['job_title']} | {exp['company']} | {exp['location']} | {exp['start_date']} - {exp['end_date']}</h3>
                <ul>
        """
        for achievement in exp['achievements']:
            html += f"<li>{achievement}</li>"
        html += """
                </ul>
            </div>
        """

    html += """
        </div>

        <div class="section">
            <h2>Education</h2>
    """
    for edu in education:
        html += f"""
            <div class="education">
                <h3>{edu['degree']}</h3>
                <p>{edu['institution']} | {edu['location']} | Graduated: {edu['graduation_date']}</p>
                <p>Honors/Awards: {edu['honors'] if edu['honors'] else "N/A"}</p>
            </div>
        """

    html += f"""
        </div>

        <div class="section">
            <h2>Skills</h2>
            <p>{', '.join(skills)}</p>
        </div>

        <div class="section">
            <h2>Certifications</h2>
            <p>{', '.join(certifications) if certifications else "N/A"}</p>
        </div>

        <div class="section">
            <h2>Projects</h2>
    """
    for proj in projects:
        html += f"""
            <div class="project">
                <h3>{proj['title']}</h3>
                <p><strong>Description:</strong> {proj['description']}</p>
                <p><strong>Technologies:</strong> {proj['technologies']}</p>
                <p><strong>Role:</strong> {proj['role']}</p>
            </div>
        """



    html += f"""
        </div>

        <div class="section">
            <h2>Languages</h2>
            <p>{', '.join(languages) if languages else "N/A"}</p>
        </div>

        <div class="section">
            <h2>Hobbies and Interests</h2>
            <p>{', '.join(hobbies) if hobbies else "N/A"}</p>
        </div>
    </body>
    </html>
    """
    return html

def save_resume_to_pdf(html, filename="resume.pdf"):
    """Save the generated HTML resume to a PDF file."""
    options = {
        'encoding': 'UTF-8',
        'quiet': ''
    }
    config = pdfkit.configuration(wkhtmltopdf='/usr/bin/wkhtmltopdf')
    pdfkit.from_string(html, filename, configuration=config, options=options)
    print(f"\nResume saved to {filename}")

def main():
    """Main function to generate a resume."""
    print("Welcome to the Resume Generator!")
    name, phone, email, linkedin, portfolio, address = get_contact_info()

    # Get work experience
    experiences = get_work_experience()

    # Generate work experience text for AI summarization
    work_experience_text = "\n".join([
        f"{exp['job_title']} at {exp['company']} from {exp['start_date']} to {exp['end_date']}. " +
        " ".join(exp['achievements'])
        for exp in experiences
    ])

    # Get professional summary (hybrid approach)
    summary = get_professional_summary(work_experience_text)

    # Get other details
    education = get_education()
    skills = get_skills()
    certifications = get_certifications()
    projects = get_projects()

    languages = get_languages()
    hobbies = get_hobbies()

    # Generate HTML resume
    html_resume = generate_resume_html(name, phone, email, linkedin, portfolio, address, summary, experiences, education, skills, certifications, projects,languages, hobbies)

    # Save as PDF
    save_resume_to_pdf(html_resume)

if __name__ == "__main__":
    main()